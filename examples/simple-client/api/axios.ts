/* This file was generated by https://github.com/schema-driven-rest/plugin-fetch */
/* tslint:disable */
import {BaseAxiosClient, ControllerOptions} from './baseAxiosClient';
import axios from 'axios';

export class UserClient extends BaseAxiosClient {
  constructor(options: ControllerOptions) {
    super(options);
  }

  async login(model: LoginRequest): Promise<LoginResponse> {
    try {
      let url = this.options.baseUrl + '/user/login?';

      const response = await axios.post<LoginResponse>(
        url,
        await this.transformOptions({
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          data: model,
        })
      );

      const status = response.status;

      if (status === 200) {
        return response.data;
      } else {
        throw {statusCode: status, body: response.data};
      }
    } catch (ex) {
      throw ex;
    }
  }

  async getUser(model: GetUserRequest): Promise<UserResponse> {
    try {
      let url = this.options.baseUrl + '/user/user?';

      const response = await axios.get<UserResponse>(
        url,
        await this.transformOptions({
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          data: model,
        })
      );

      const status = response.status;

      if (status === 200) {
        return response.data;
      } else {
        throw {statusCode: status, body: response.data};
      }
    } catch (ex) {
      throw ex;
    }
  }

  async updateUser(model: UpdateUserRequest): Promise<UserResponse> {
    try {
      let url = this.options.baseUrl + '/user/update-user?';

      const response = await axios.post<UserResponse>(
        url,
        await this.transformOptions({
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          data: model,
        })
      );

      const status = response.status;

      if (status === 200) {
        return response.data;
      } else {
        throw {statusCode: status, body: response.data};
      }
    } catch (ex) {
      throw ex;
    }
  }
}

/* This file was generated by https://github.com/schema-rest-driven/plugin-models */
export type Maybe<T> = T | null;
type FixDecorator<T> = T; /** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export class UserResponse {
  user!: FixDecorator<UserModel>;
}

export class UserModel {
  email!: Scalars['String'];
  eyeColor!: Scalars['Int'];
}

export class UpdateUserRequest {
  email!: Scalars['String'];
  eyeColor!: Scalars['Int'];
}

export class LoginResponse {
  authorized!: Scalars['Boolean'];
  jwt!: Scalars['String'];
  details!: Maybe<Array<Maybe<Scalars['String']>>>;
}

export class LoginRequest {
  username!: Scalars['String'];
}

export class GetUserRequest {
  userId!: Scalars['String'];
}
