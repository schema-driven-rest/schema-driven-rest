import {PluginConfig, PluginOptions} from '@sdr/core';
import * as ejs from 'ejs';

export function plugin(options: PluginOptions, config: {baseClientLocation: string}) {
  return ejs.render(
    // language=EJS
    `/* This file was generated by https://github.com/schema-driven-rest/plugin-fetch */
/* tslint:disable */
import {BaseAxiosClient,ControllerOptions} from '<%=baseClientLocation%>';
import axios from 'axios';

<% for(const type of types) { %>
    <%
        const controllerName = type.name;
        const {
            parameters: [{value: controllerPath}],
        } = type.directives.find(a => a.name === 'controller');

    %>

export class <%= type.name %>Client extends BaseAxiosClient {

    constructor(options:ControllerOptions){
        super(options);
    }

    <% for(const method of type.methods) { %>
        <%
            const requestDirective = method.directives.find(a => a.name === 'request');
            const requiresAuth = !!method.directives.find(a => a.name === 'auth');
            const methodName = method.name;
            const requestType = method.arguments[0]?method.arguments[0].type:null;
            const returnType = method.returnType.type;

            if (!requestDirective) {
                throw \`This plugin requires all methods to have a request directive. \${method.name} is missing.\`;
            }
            const methodPath = requestDirective.parameters.find(parameter => parameter.name === 'path').value;
            const methodType = requestDirective.parameters.find(parameter => parameter.name === 'method').value;

        %>

    async <%= methodName %>(<%= (requestType?'model: '+requestType:'') %>):Promise<<%= returnType %>>{
        try{
            let url = this.options.baseUrl + '/<%=controllerPath%>/<%= methodPath %>?';
       

            const response = await axios.<%=methodType.toLowerCase()%><<%= returnType %>>(url,await this.transformOptions({      headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }<%= (requestType?',data:model':'') %>}));

            const status = response.status; 

            if (status === 200) {
                return response.data
            }

            else {
                throw {statusCode: status,body: response.data};
            }
        }
        catch(ex){
            throw ex;
        }
    }
    <% } %>
}


<% } %>
`,
    {
      types: options.types.filter(a => a.directives.find(a => a.name === 'controller')),
      baseClientLocation: config.baseClientLocation,
    },
    {}
  );
}

export const config: PluginConfig = {
  dependsOn: ['@sdr/controller'],
  requiredParameters: ['baseClientLocation'],
};
