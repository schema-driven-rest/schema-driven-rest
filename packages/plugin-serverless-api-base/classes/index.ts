import {PluginConfig, PluginOptions} from '@sdr/core';
import * as ejs from 'ejs';

export function plugin(options: PluginOptions, config: {}) {
  // language=EJS
  return ejs.render(
    `/* This file was generated by https://github.com/schema-driven-rest/plugin-serverless-api-base */
/* tslint:disable */

<% for(const type of types) { %>
    <%
        const controllerName = type.name;
        const {
            parameters: [{value: controllerPath}],
        } = type.directives.find(a => a.name === 'controller');

    %>

export abstract class Base<%= type.name %>Controller {

    <% for(const method of type.methods) { %>
        <%
            const requestDirective = method.directives.find(a => a.name === 'request');
            const requiresAuth = !!method.directives.find(a => a.name === 'auth');
            const methodName = method.name;
            const requestType = method.arguments[0]?method.arguments[0].type:null;
            const returnType = method.returnType.type;

            if (!requestDirective) {
                throw \`This plugin requires all methods to have a request directive. \${method.name} is missing.\`;
            }
            const methodPath = requestDirective.parameters.find(parameter => parameter.name === 'path').value;
            const methodType = requestDirective.parameters.find(parameter => parameter.name === 'method').value;

        %>

    abstract <%= methodName %>(<%= (requestType?'model: '+requestType:'') %>):Promise<<%= returnType %>>;
    <% } %>
}


<% } %>
`,
    {
      types: options.types.filter(a=>a.directives.find(a => a.name === 'controller')),
    },
    {}
  );
}

export const config: PluginConfig = {
  dependsOn: ['@sdr/controller'],
};
